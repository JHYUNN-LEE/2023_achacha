"""
Django settings for ACHACHA project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os, environ
import pymysql
from re import template
# import mykafka
# import kafkahandler

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get('SECRET_KEY')
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'acha_money',
    'all_search',
    'fast_search',
    'member',
    'django.contrib.admin',
    # AWS S3
    'storages',
]

AUTH_USER_MODEL = 'member.customuser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ACHACHA.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 미디어 설정
MEDIAFILES_LOCATION = 'media'
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media') #BASE_DIR/'media'

WSGI_APPLICATION = 'ACHACHA.wsgi.application'

# ----- AWS 정보 ----- #
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_REGION = 'ap-northeast-2'
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_S3_HOST = 's3.%s.amazonaws.com' % AWS_REGION
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

# ----- S3 Storage ----- #
# 장고의 기본 저장 시스템 클래스를 지정
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases



if os.getenv('GAE_APPLICATION', None):
    DATABASES = {
        'default': {
            'ENGINE'    : 'django.db.backends.mysql',
            'NAME'      : env("DB_NAME"),
            'USER'      : env("DB_USER"),
            'PASSWORD'  : env("DB_PASSWORD"),
            'HOST'      : 'cloudsql/mysql-achacha',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env("DB_NAME"),
            'USER': env("DB_USER"),
            'PASSWORD': env("DB_PASSWORD"),
            'HOST': env("DB_HOST"),
            'PORT': env("DB_PORT"), 
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    STATIC_DIR,
    # ('index', STATIC_DIR,),
    #이하 추가
    os.path.join(BASE_DIR, "static")
]
STATIC_ROOT = os.path.join(BASE_DIR, '.static_root')


# Default
# primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'

LOGOUT_REDIRECT_URL = '/'

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'formatters': {
#         'sample': {
#             'format': "[%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(message)s",
#             'datefmt': "%d%b%Y %H:%M:%S"
#         },
#         'request_format': {
#             'format': "%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(message)s",
#             'datefmt': "%Y-%b-%d %H:%M:%S"
#         }
#     },
#     'handlers': {
#         # 'file': {
#         #     'level': 'INFO',
#         #     'encoding': 'utf-8',
#         #     'class' : 'logging.handlers.TimedRotatingFileHandler',
#         #     'filename': os.path.join(BASE_DIR, 'logs/error_log') + "/log",
#         #     'when': "midnight",
#         #     'formatter': 'sample',
#         # },
#         # 'service_trace': {
#         #     'level': 'INFO',
#         #     'encoding': 'utf-8',
#         #     'class' : 'logging.handlers.TimedRotatingFileHandler',
#         #     'filename': os.path.join(BASE_DIR, 'logs/service_log') + "/service_log",
#         #     'when': "midnight",
#         #     'formatter': 'request_format',
#         # },
#         #pip install python-logstash
#         # 'logstash': {
#         #     'level': 'INFO',
#         #     'class': 'logstash.TCPLogstashHandler',
#         #     'host': '54.64.90.112',
#         #     'port': 5044,
#         #     'version': 1,
#         #     'fqdn' : True,
#         #     'message_type' : 'logstash',
#         #     'tags' : ['django'],
#         # }
#         'test_kafka': {
#             'level': 'INFO',
#             'encoding': 'utf-8',
#             'class' : 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/test_kafka') + "/test",
#             'when': "midnight",
#             'formatter': 'request_format',
#         },   
#         # pip install kafka-python
#         'kafka': {
#             'level': 'INFO',
#             'class': 'kafkahandler.KafkaHandler',
#             'broker': '59.187.205.37:9092',
#             'topic': 'django_test',
#         }
#     },
#     'loggers': {
#         # 'django': {
#         #     'handlers': ['file'],
#         #     'level': 'DEBUG',
#         #     'propagate': False,
#         # },
#         # 'user_acctive.request': {
#         #     'handlers': ['service_trace', 'logstash'],
#         #     'level': 'INFO',
#         # },
#         'test_kafka': {
#             'handlers': ['test_kafka', 'kafka'],
#             'level': 'INFO',
#         },
#     }
# }



# session 설정
SESSION_COOKIE_AGE = 1200
SESSION_SAVE_EVERY_REQUEST = True

